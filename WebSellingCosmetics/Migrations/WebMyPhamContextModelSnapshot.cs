// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSellingCosmetics.Models;

#nullable disable

namespace WebSellingCosmetics.Migrations
{
    [DbContext(typeof(WebMyPhamContext))]
    partial class WebMyPhamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebSellingCosmetics.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Avartar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "AccountTypeId" }, "IX_Accounts_AccountTypeId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Accounts_RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "AccountId" }, "IX_Address_AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Discount_percent");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UseNumber")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFromUserId")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsToUserId")
                        .HasColumnType("bit");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FromUserId" }, "IX_Messages_FromUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Oder", b =>
                {
                    b.Property<int>("OdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OdersId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("OdersId");

                    b.HasIndex(new[] { "AccountId" }, "IX_Oders_AccountId");

                    b.HasIndex(new[] { "DiscountId" }, "IX_Oders_DiscountId");

                    b.ToTable("Oders");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.OderItem", b =>
                {
                    b.Property<int>("OderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OderId", "ProductId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Oder_Items_ProductId");

                    b.ToTable("Oder_Items", (string)null);
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Payment", b =>
                {
                    b.Property<int>("PaymentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentsId"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("OdersId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodsId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("PaymentsId");

                    b.HasIndex(new[] { "OdersId" }, "IX_Payments_OdersId");

                    b.HasIndex(new[] { "PaymentMethodsId" }, "IX_Payments_PaymentMethodsId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodsId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodsId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductInventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Product_InventoryId");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_Products_ProductTypeId");

                    b.HasIndex(new[] { "ProductInventoryId" }, "IX_Products_Product_InventoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ProductsInventory", b =>
                {
                    b.Property<int>("ProductInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_InventoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInventoryId"), 1L, 1);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("QuantitySold")
                        .HasColumnType("int");

                    b.HasKey("ProductInventoryId")
                        .HasName("PK_Product_Inventory");

                    b.ToTable("Products_Inventorys", (string)null);
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ReceiptProduct", b =>
                {
                    b.Property<int>("ReceiptProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Receipt_ProductId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptProductId"), 1L, 1);

                    b.Property<DateTime?>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("ReceiptProductId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Receipt_Products_ProductId");

                    b.ToTable("Receipt_Products", (string)null);
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentsId"), 1L, 1);

                    b.Property<int?>("OdersId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingMethodsId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipmentsId");

                    b.HasIndex(new[] { "OdersId" }, "IX_Shipments_OdersId");

                    b.HasIndex(new[] { "ShippingMethodsId" }, "IX_Shipments_ShippingMethodsId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ShippingMethod", b =>
                {
                    b.Property<int>("ShippingMethodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingMethodsId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("ShippingMethodsId");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Account", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_Account_AccountType");

                    b.HasOne("WebSellingCosmetics.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("AccountType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Address", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Message", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Account", "FromUser")
                        .WithMany("Messages")
                        .HasForeignKey("FromUserId");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Oder", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Account", "Account")
                        .WithMany("Oders")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Oders_Account");

                    b.HasOne("WebSellingCosmetics.Models.Discount", "Discount")
                        .WithMany("Oders")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Oders_Discount");

                    b.Navigation("Account");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.OderItem", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Oder", "Oder")
                        .WithMany("OderItems")
                        .HasForeignKey("OderId")
                        .IsRequired()
                        .HasConstraintName("FK_Oder_Items_Oders");

                    b.HasOne("WebSellingCosmetics.Models.Product", "Product")
                        .WithMany("OderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Oder_Items_Product");

                    b.Navigation("Oder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Payment", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Oder", "Oders")
                        .WithMany("Payments")
                        .HasForeignKey("OdersId")
                        .HasConstraintName("FK_Payments_Oders");

                    b.HasOne("WebSellingCosmetics.Models.PaymentMethod", "PaymentMethods")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodsId")
                        .HasConstraintName("FK_Payments_PaymentMethods");

                    b.Navigation("Oders");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Product", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.ProductsInventory", "ProductInventory")
                        .WithMany("Products")
                        .HasForeignKey("ProductInventoryId")
                        .HasConstraintName("FK_Product_Product_Inventory");

                    b.HasOne("WebSellingCosmetics.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_Product_ProductType");

                    b.Navigation("ProductInventory");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ReceiptProduct", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Product", "Product")
                        .WithMany("ReceiptProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Receipt_Product_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Shipment", b =>
                {
                    b.HasOne("WebSellingCosmetics.Models.Oder", "Oders")
                        .WithMany("Shipments")
                        .HasForeignKey("OdersId")
                        .HasConstraintName("FK_Shipments_Oders");

                    b.HasOne("WebSellingCosmetics.Models.ShippingMethod", "ShippingMethods")
                        .WithMany("Shipments")
                        .HasForeignKey("ShippingMethodsId")
                        .HasConstraintName("FK_Shipments_ShippingMethods");

                    b.Navigation("Oders");

                    b.Navigation("ShippingMethods");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Account", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Messages");

                    b.Navigation("Oders");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Discount", b =>
                {
                    b.Navigation("Oders");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Oder", b =>
                {
                    b.Navigation("OderItems");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Product", b =>
                {
                    b.Navigation("OderItems");

                    b.Navigation("ReceiptProducts");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ProductsInventory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebSellingCosmetics.Models.ShippingMethod", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
